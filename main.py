import asyncio
import aiohttp
import logging
import idna  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Punycode
import ssl
import socket
import OpenSSL
import os
from datetime import datetime, timedelta, timezone
from dateutil.relativedelta import relativedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.exceptions import TelegramNetworkError, TelegramRetryAfter
from dotenv import load_dotenv
from supabase import create_client, Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å API_TOKEN=your_token")

# ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
if not ADMIN_CHAT_ID:
    raise ValueError("ADMIN_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å ADMIN_CHAT_ID=your_chat_id")

# –ù–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
# os.getenv –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É 'True' –∏–ª–∏ 'False', —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–µ
ONLY_ADMIN_PUSH = os.getenv('ONLY_ADMIN_PUSH') == 'True'

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("SUPABASE_URL –∏ SUPABASE_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ScreenshotMachine API –∫–ª—é—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
SCREENSHOTMACHINE_API_KEY = os.getenv('SCREENSHOTMACHINE_API_KEY')

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

from io import BytesIO
import requests

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
SSL_WARNING_DAYS = 30  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–≤ –¥–Ω—è—Ö) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ




async def is_admin_in_chat(chat_id: int, user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['administrator', 'creator']
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        return False




async def send_admin_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: {message}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

async def send_notification(chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–∏–±–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç, –ª–∏–±–æ –∞–¥–º–∏–Ω—É,
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ONLY_ADMIN_PUSH.
    """
    target_chat_id = ADMIN_CHAT_ID if ONLY_ADMIN_PUSH else chat_id
    
    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É, –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º —á–∞—Ç–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    if ONLY_ADMIN_PUSH and str(chat_id) != str(ADMIN_CHAT_ID):
         notification_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ ID: {chat_id}\n\n{text}"
    else:
         # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
         notification_text = text

    try:
        await bot.send_message(chat_id=target_chat_id, text=notification_text)
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {target_chat_id}: {e}")

async def safe_send_message(chat_id: int, text: str, parse_mode: str = None, max_retries: int = 3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    for attempt in range(max_retries):
        try:
            if parse_mode:
                await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
            else:
                await bot.send_message(chat_id=chat_id, text=text)
            return True
        except TelegramRetryAfter as e:
            logging.warning(f"Rate limit hit, waiting {e.retry_after} seconds...")
            await asyncio.sleep(e.retry_after)
        except TelegramNetworkError as e:
            logging.warning(f"Network error on attempt {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
            else:
                logging.error(f"Failed to send message after {max_retries} attempts: {e}")
                return False
        except Exception as e:
            logging.error(f"Unexpected error sending message: {e}")
            return False
    return False

async def safe_reply_message(message: Message, text: str, parse_mode: str = None, max_retries: int = 3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    for attempt in range(max_retries):
        try:
            if parse_mode:
                await message.reply(text, parse_mode=parse_mode)
            else:
                await message.reply(text)
            return True
        except TelegramRetryAfter as e:
            logging.warning(f"Rate limit hit, waiting {e.retry_after} seconds...")
            await asyncio.sleep(e.retry_after)
        except TelegramNetworkError as e:
            logging.warning(f"Network error on attempt {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
            else:
                logging.error(f"Failed to reply to message after {max_retries} attempts: {e}")
                return False
        except Exception as e:
            logging.error(f"Unexpected error replying to message: {e}")
            return False
    return False


def get_sites_count():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = supabase.table('botmonitor_sites').select('id', count='exact').execute()
        return result.count
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∞–π—Ç–æ–≤: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π IDN (Internationalized Domain Names)
def process_url(url):
    url = url.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not (url.startswith('http://') or url.startswith('https://')):
        url = 'https://' + url

    # –†–∞–∑–±–∏—Ä–∞–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏
    protocol_end = url.find('://')
    if protocol_end != -1:
        protocol = url[:protocol_end + 3]
        remaining = url[protocol_end + 3:]

        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à –ø–æ—Å–ª–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        path_start = remaining.find('/')
        if path_start != -1:
            domain = remaining[:path_start]
            path = remaining[path_start:]
        else:
            domain = remaining
            path = ''

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –¥–æ–º–µ–Ω –≤ punycode
        try:
            punycode_domain = idna.encode(domain).decode('ascii')
            return protocol + punycode_domain + path
        except Exception as e:
            logging.error(f"Error converting domain to punycode: {e}")
            return url

    return url


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async def check_ssl_certificate(url):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
        protocol_end = url.find('://')
        if protocol_end != -1:
            remaining = url[protocol_end + 3:]
            path_start = remaining.find('/')
            if path_start != -1:
                domain = remaining[:path_start]
            else:
                domain = remaining

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL
            context = ssl.create_default_context()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            with socket.create_connection((domain, 443)) as sock:
                with context.wrap_socket(sock, server_hostname=domain) as ssock:
                    cert = ssock.getpeercert(binary_form=True)
                    x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, cert)

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    expiry_date = datetime.strptime(x509.get_notAfter().decode('ascii'), '%Y%m%d%H%M%SZ')
                    # FIX: Make expiry_date timezone-aware (UTC)
                    expiry_date = expiry_date.replace(tzinfo=timezone.utc)
                    issuer = dict(x509.get_issuer().get_components())
                    issuer_name = issuer.get(b'CN', b'Unknown').decode('utf-8')
                    subject = dict(x509.get_subject().get_components())
                    subject_name = subject.get(b'CN', b'Unknown').decode('utf-8')

                    days_left = (expiry_date - datetime.now(timezone.utc)).days

                    return {
                        'has_ssl': True,
                        'expiry_date': expiry_date,
                        'days_left': days_left,
                        'issuer': issuer_name,
                        'subject': subject_name,
                        'expires_soon': days_left <= SSL_WARNING_DAYS,
                        'expired': days_left <= 0
                    }
    except Exception as e:
        logging.error(f"Error checking SSL certificate: {e}")
        return {
            'has_ssl': False,
            'error': str(e)
        }


async def take_screenshot(url: str) -> BytesIO:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ ScreenshotMachine API"""
    if not SCREENSHOTMACHINE_API_KEY:
        logging.error("ScreenshotMachine API key not provided")
        return None
    
    try:
        logging.info(f"Creating screenshot via ScreenshotMachine API for URL: {url}")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ScreenshotMachine API
        params = {
            'key': SCREENSHOTMACHINE_API_KEY,
            'url': url,
            'dimension': '1920x1080',  # –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            'format': 'PNG',
            'cacheLimit': 0,  # –ù–µ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å
            'timeout': 30,    # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            'device': 'desktop',
            'fullPage': 'false',
            'thumbnail': 'false'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get('https://api.screenshotmachine.com', params=params, timeout=35)
        
        if response.status_code == 200:
            logging.info(f"Screenshot created successfully via API for {url}")
            return BytesIO(response.content)
        else:
            logging.error(f"ScreenshotMachine API error: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        logging.error(f"Timeout while creating screenshot via API for {url}")
        return None
    except requests.exceptions.RequestException as e:
        logging.error(f"Request error while creating screenshot via API for {url}: {e}")
        return None
    except Exception as e:
        logging.error(f"Unexpected error while creating screenshot via API for {url}: {e}")
        return None


async def diagnose_api():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã ScreenshotMachine API"""
    try:
        logging.info("Starting ScreenshotMachine API diagnosis...")
        
        if not SCREENSHOTMACHINE_API_KEY:
            logging.error("ScreenshotMachine API key not provided")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        test_url = "https://httpbin.org/get"
        params = {
            'key': SCREENSHOTMACHINE_API_KEY,
            'url': test_url,
            'dimension': '1024x768',
            'format': 'PNG',
            'cacheLimit': 0,
            'timeout': 10
        }
        
        response = requests.get('https://api.screenshotmachine.com', params=params, timeout=15)
        
        if response.status_code == 200:
            logging.info("ScreenshotMachine API is working correctly")
            logging.info(f"API response size: {len(response.content)} bytes")
            return True
        else:
            logging.error(f"ScreenshotMachine API error: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"ScreenshotMachine API diagnosis failed: {e}")
        return False


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ SQL –≤ Supabase Dashboard
    pass


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞
class AddSite(StatesGroup):
    waiting_for_url = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç –∏—Å—Ç–µ—á–µ–Ω–∏—è
class SetExpiration(StatesGroup):
    waiting_for_domain_date = State()
    waiting_for_hosting_date = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤\n"
        "/remove - —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤\n"
        "/setdomain ID - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞\n"
        "/sethosting ID - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–∞\n"
        "/myid - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à User ID –∏ Chat ID\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/screenshot ID - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞\n"
        "/diagnose - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ScreenshotMachine API"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("myid"))
async def cmd_myid(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USER_ID –∏ CHAT_ID"""
    await message.answer(f"User ID: `{message.from_user.id}`\nChat ID: `{message.chat.id}`", parse_mode="Markdown")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
    
    if message.chat.type in ['group', 'supergroup']:
        help_text += "**–í –≥—Ä—É–ø–ø–∞—Ö:**\n"
        help_text += "@–±–æ—Ç - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
        help_text += "@–±–æ—Ç –¥–æ–º–µ–Ω.com - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∞–π—Ç–µ\n\n"
    
    help_text += "**–ö–æ–º–∞–Ω–¥—ã:**\n"
    help_text += "/add [URL] - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
    help_text += "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤\n"
    help_text += "/remove [ID] - —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
    help_text += "/status - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤\n"
    help_text += "/setdomain [ID] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞\n"
    help_text += "/sethosting [ID] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–∞\n"
    help_text += "/myid - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à User ID –∏ Chat ID\n"
    help_text += "/screenshot [ID] - —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞\n"
    help_text += "/diagnose - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ScreenshotMachine API\n"
    help_text += "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
    help_text += "**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n"
    help_text += "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n"
    help_text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ (—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∏—Ä—É–µ–º.—Ä—Ñ)\n"
    help_text += "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ http:// –∏–ª–∏ https://\n"
    help_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è HTTPS —Å–∞–π—Ç–æ–≤"
    
    await message.answer(help_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
@dp.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –≥—Ä—É–ø–ø
    if message.chat.type in ['group', 'supergroup']:
        if not await is_admin_in_chat(message.chat.id, message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≥—Ä—É–ø–ø–µ.")
            return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    command_parts = message.text.split(maxsplit=1)
    url_from_args = command_parts[1] if len(command_parts) > 1 else None

    if url_from_args:
        # –ï—Å–ª–∏ URL –ø–µ—Ä–µ–¥–∞–Ω, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        await process_and_add_site(url_from_args, message, state)
    else:
        # –ï—Å–ª–∏ URL –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        await state.set_state(AddSite.waiting_for_url)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä: example.com –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∏—Ä—É–µ–º.—Ä—Ñ")

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞)
@dp.message(AddSite.waiting_for_url)
async def process_url_input(message: Message, state: FSMContext):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await process_and_add_site(message.text, message, state)

# –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥)
# –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: "–ü–µ—Ä–µ–∑–∞–ø–∏—Å—å" —á–∞—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
async def process_and_add_site(original_url: str, message: Message, state: FSMContext):
    await state.clear()
    url = process_url(original_url)

    # 1. –ò—â–µ–º —Å–∞–π—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ URL, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç chat_id
    existing_site_data = supabase.table('botmonitor_sites').select('id, chat_id').eq('url', url).limit(1).execute()
    existing_site = existing_site_data.data[0] if existing_site_data.data else None

    # –ï—Å–ª–∏ —Å–∞–π—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≠–¢–û–ú–£ —á–∞—Ç—É, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if existing_site and str(existing_site.get('chat_id')) == str(message.chat.id):
        await message.answer(f"‚úÖ –°–∞–π—Ç {original_url} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    # --- –û–±—â–∞—è —á–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ---
    status_msg_text = f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ {original_url}..."
    if existing_site:
        status_msg_text = f"üîÑ –°–∞–π—Ç {original_url} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ü–µ—Ä–µ–º–µ—â–∞—é –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å..."
    
    status_msg = await message.answer(status_msg_text)
    
    status, status_code = await check_site(url)
    is_up = 1 if status else 0
    
    has_ssl = 0
    ssl_expires_at = None
    ssl_message = ""
    if status and url.startswith('https://'):
        await bot.edit_message_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {original_url}...",
                                    chat_id=message.chat.id,
                                    message_id=status_msg.message_id)
        ssl_info = await check_ssl_certificate(url)
        has_ssl = 1 if ssl_info.get('has_ssl', False) else 0
        if has_ssl:
            ssl_expires_at = ssl_info.get('expiry_date')
            days_left = ssl_info.get('days_left')
            if ssl_info.get('expired'):
                ssl_message = f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!"
            elif ssl_info.get('expires_soon'):
                ssl_message = f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
            else:
                ssl_message = f"\nSSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π."
        else:
            ssl_message = "\n‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
    # --- –ö–æ–Ω–µ—Ü –æ–±—â–µ–π —á–∞—Å—Ç–∏ ---

    punycode_info = ""
    if url != original_url and "xn--" in url:
        punycode_info = f"\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤: {url}"

    payload = {
        'user_id': message.from_user.id,
        'chat_id': message.chat.id,
        'chat_type': message.chat.type,
        'is_up': is_up,
        'has_ssl': has_ssl,
        'ssl_expires_at': ssl_expires_at.isoformat() if ssl_expires_at else None,
        'last_check': datetime.now(timezone.utc).isoformat()
    }

    if existing_site:
        # 2. –°–ê–ô–¢ –ù–ê–ô–î–ï–ù -> –í–´–ü–û–õ–ù–Ø–ï–ú UPDATE
        supabase.table('botmonitor_sites').update(payload).eq('id', existing_site['id']).execute()
        
        final_message = f"‚úÖ –°–∞–π—Ç {original_url} –±—ã–ª **–ø–µ—Ä–µ–º–µ—â–µ–Ω** –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if status else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} (–∫–æ–¥ {status_code}).{punycode_info}{ssl_message}"
        await bot.edit_message_text(final_message, chat_id=message.chat.id, message_id=status_msg.message_id)

    else:
        # 3. –°–ê–ô–¢ –ù–ï –ù–ê–ô–î–ï–ù -> –í–´–ü–û–õ–ù–Ø–ï–ú INSERT
        payload['url'] = url
        payload['original_url'] = original_url
        
        supabase.table('botmonitor_sites').insert(payload).execute()
        
        final_message = f"‚úÖ –°–∞–π—Ç {original_url} **–¥–æ–±–∞–≤–ª–µ–Ω** –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n–°—Ç–∞—Ç—É—Å: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if status else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} (–∫–æ–¥ {status_code}).{punycode_info}{ssl_message}"
        await bot.edit_message_text(final_message, chat_id=message.chat.id, message_id=status_msg.message_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reserve - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
@dp.message(Command("reserve"))
async def cmd_reserve(message: Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –¥–ª—è —Å–∞–π—Ç–∞"""
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reserve <ID_—Å–∞–π—Ç–∞>\n–ü—Ä–∏–º–µ—Ä: /reserve 123")
        return
    
    try:
        site_id = int(args[1])
    except ValueError:
        await message.answer("ID —Å–∞–π—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–π—Ç–µ
    site_data = supabase.table('botmonitor_sites').select('id, original_url, is_reserve_domain').eq('id', site_id).eq('chat_id', message.chat.id).execute()
    
    if not site_data.data:
        await message.answer("–°–∞–π—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
        return
    
    site = site_data.data[0]
    current_status = site.get('is_reserve_domain', False)
    new_status = not current_status
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    supabase.table('botmonitor_sites').update({'is_reserve_domain': new_status}).eq('id', site_id).execute()
    
    status_text = "—Ä–µ–∑–µ—Ä–≤–Ω—ã–º" if new_status else "–æ–±—ã—á–Ω—ã–º"
    await message.answer(f"‚úÖ –°–∞–π—Ç {site['original_url']} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è {status_text} –¥–æ–º–µ–Ω–æ–º")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@dp.message(Command("list"))
async def cmd_list(message: Message):
    sites_data = supabase.table('botmonitor_sites').select('id, url, original_url, is_up, has_ssl, ssl_expires_at, domain_expires_at, hosting_expires_at, last_check, is_reserve_domain').eq('chat_id', message.chat.id).execute()
    sites = sites_data.data

    if not sites:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π /add")
        return

    response = "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤:\n\n"
    for site in sites:
        site_id = site['id']
        url = site['url']
        original_url = site['original_url']
        is_up = site['is_up']
        has_ssl = site['has_ssl']
        ssl_expires_at = site['ssl_expires_at']
        domain_expires_at = site['domain_expires_at']
        hosting_expires_at = site['hosting_expires_at']
        last_check = site['last_check']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        display_url = original_url if original_url else url
        is_reserve = site.get('is_reserve_domain', False)
        
        if is_reserve:
            status = "üîÑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π" if is_up else "‚è∏Ô∏è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        else:
            status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if is_up else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        last_check_str = "–ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è" if not last_check else datetime.fromisoformat(last_check.replace('Z', '+00:00')).strftime("%d.%m.%Y %H:%M:%S")

        site_info = f"ID: {site_id}\nURL: {display_url}\n–°—Ç–∞—Ç—É—Å: {status}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        if has_ssl and ssl_expires_at:
            expiry_date = datetime.fromisoformat(ssl_expires_at.replace('Z', '+00:00'))
            days_left = (expiry_date - datetime.now(timezone.utc)).days
            if days_left <= 0:
                ssl_status = "‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!"
            elif days_left <= SSL_WARNING_DAYS:
                ssl_status = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
            else:
                ssl_status = f"SSL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π"
            site_info += f"{ssl_status}\n"
        elif url.startswith('https://'):
            site_info += "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞
        if domain_expires_at:
            domain_date = datetime.fromisoformat(domain_expires_at).date()
            domain_days_left = (domain_date - datetime.now(timezone.utc).date()).days
            if domain_days_left <= 0:
                domain_status = f"‚ö†Ô∏è –î–æ–º–µ–Ω –∏—Å—Ç—ë–∫! ({domain_date.strftime('%d.%m.%Y')})"
            elif domain_days_left <= 30:
                domain_status = f"‚ö†Ô∏è –î–æ–º–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {domain_days_left} –¥–Ω–µ–π ({domain_date.strftime('%d.%m.%Y')})"
            else:
                domain_status = f"–î–æ–º–µ–Ω –¥–æ {domain_date.strftime('%d.%m.%Y')}"
            site_info += f"–î–æ–º–µ–Ω: {domain_status}\n"
        else:
            site_info += "–î–æ–º–µ–Ω: –¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"

        if hosting_expires_at:
            hosting_date = datetime.fromisoformat(hosting_expires_at).date()
            hosting_days_left = (hosting_date - datetime.now(timezone.utc).date()).days
            if hosting_days_left <= 0:
                hosting_status = f"‚ö†Ô∏è –•–æ—Å—Ç–∏–Ω–≥ –∏—Å—Ç—ë–∫! ({hosting_date.strftime('%d.%m.%Y')})"
            elif hosting_days_left <= 30:
                hosting_status = f"‚ö†Ô∏è –•–æ—Å—Ç–∏–Ω–≥ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {hosting_days_left} –¥–Ω–µ–π ({hosting_date.strftime('%d.%m.%Y')})"
            else:
                hosting_status = f"–•–æ—Å—Ç–∏–Ω–≥ –¥–æ {hosting_date.strftime('%d.%m.%Y')}"
            site_info += f"–•–æ—Å—Ç–∏–Ω–≥: {hosting_status}\n"
        else:
            site_info += "–•–æ—Å—Ç–∏–Ω–≥: –¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n"

        site_info += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_str}\n\n"
        response += site_info

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove
@dp.message(Command("remove"))
async def cmd_remove(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)
    args = command_parts[1] if len(command_parts) > 1 else None

    if not args:
        sites_data = supabase.table('botmonitor_sites').select('id, original_url, url').eq('chat_id', message.chat.id).execute()
        sites = [(s['id'], s['original_url'], s['url']) for s in sites_data.data]

        if not sites:
            await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        response = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove ID\n\n–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–∞–π—Ç–æ–≤:\n"
        for site_id, original_url, url in sites:
            display_url = original_url if original_url else url
            response += f"ID: {site_id} - {display_url}\n"

        await message.answer(response)
        return

    try:
        site_id = int(args)
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    site_data = supabase.table('botmonitor_sites').select('original_url, url').eq('id', site_id).eq('chat_id', message.chat.id).execute()
    site = (site_data.data[0]['original_url'], site_data.data[0]['url']) if site_data.data else None

    if not site:
        await message.answer(f"‚ùå –°–∞–π—Ç —Å ID {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    else:
        original_url, url = site
        display_url = original_url if original_url else url
        supabase.table('botmonitor_sites').delete().eq('id', site_id).eq('chat_id', message.chat.id).execute()
        await message.answer(f"‚úÖ –°–∞–π—Ç {display_url} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@dp.message(Command("status"))
async def cmd_status(message: Message):
    sites_data = supabase.table('botmonitor_sites').select('id, url, original_url').eq('chat_id', message.chat.id).execute()
    sites = [(s['id'], s['url'], s['original_url']) for s in sites_data.data]

    if not sites:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π /add")
        return

    msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤...")

    results = []
    for site_id, url, original_url in sites:
        display_url = original_url if original_url else url

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
        status, status_code = await check_site(url)
        status_str = f"‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})" if status else f"‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})"
        site_info = f"ID: {site_id}\nURL: {display_url}\n–°—Ç–∞—Ç—É—Å: {status_str}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –µ—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
        ssl_info = None
        has_ssl = False
        ssl_expires_at = None

        if status and url.startswith('https://'):
            ssl_info = await check_ssl_certificate(url)
            has_ssl = ssl_info.get('has_ssl', False)

            if has_ssl:
                expiry_date = ssl_info.get('expiry_date')
                days_left = ssl_info.get('days_left')

                if ssl_info.get('expired'):
                    site_info += f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!"
                elif ssl_info.get('expires_soon'):
                    site_info += f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
                else:
                    site_info += f"\nSSL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π"

                ssl_expires_at = expiry_date
            else:
                site_info += "\n‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"

        results.append(site_info)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        supabase.table('botmonitor_sites').update({
            'is_up': status,
            'has_ssl': has_ssl,
            'ssl_expires_at': ssl_expires_at.isoformat() if ssl_expires_at else None,
            'last_check': datetime.now(timezone.utc).isoformat()
        }).eq('id', site_id).execute()

    response = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n\n".join(results)
    await bot.edit_message_text(response, chat_id=message.chat.id, message_id=msg.message_id)


@dp.message(Command("screenshot"))
async def cmd_screenshot(message: Message):
    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID —Å–∞–π—Ç–∞: /screenshot ID")
        return
    
    try:
        site_id = int(command_parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
        
    site_data = supabase.table('botmonitor_sites').select('url, original_url').eq('id', site_id).eq('chat_id', message.chat.id).execute()
    site = (site_data.data[0]['url'], site_data.data[0]['original_url']) if site_data.data else None
    
    if not site:
        await message.answer(f"–°–∞–π—Ç —Å ID {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
        
    url, original_url = site
    display_url = original_url if original_url else url
    
    msg = await message.answer(f"–°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è {display_url}...")
    
    screenshot = await take_screenshot(url)
    
    if screenshot:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=types.BufferedInputFile(screenshot.getvalue(), filename=f"screenshot_{site_id}.png"),
            caption=f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞: {display_url}"
        )
        await bot.delete_message(message.chat.id, msg.message_id)
    else:
        await bot.edit_message_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á ScreenshotMachine.", 
                                  chat_id=message.chat.id, message_id=msg.message_id)


@dp.message(Command("diagnose"))
async def cmd_diagnose(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ScreenshotMachine API"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –≥—Ä—É–ø–ø
    if message.chat.type in ['group', 'supergroup']:
        if not await is_admin_in_chat(message.chat.id, message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –≥—Ä—É–ø–ø–µ.")
            return
    
    msg = await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É ScreenshotMachine API...")
    
    try:
        result = await diagnose_api()
        
        if result:
            await bot.edit_message_text(
                "‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ScreenshotMachine API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                chat_id=message.chat.id,
                message_id=msg.message_id
            )
        else:
            await bot.edit_message_text(
                "‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ScreenshotMachine API –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                chat_id=message.chat.id,
                message_id=msg.message_id
            )
    except Exception as e:
        await bot.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}",
            chat_id=message.chat.id,
            message_id=msg.message_id
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setdomain
@dp.message(Command("setdomain"))
async def cmd_setdomain(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –≥—Ä—É–ø–ø
    if message.chat.type in ['group', 'supergroup']:
        if not await is_admin_in_chat(message.chat.id, message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ.")
            return

    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID —Å–∞–π—Ç–∞: /setdomain ID")
        return
    
    try:
        site_id = int(command_parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∞–π—Ç
    site_data = supabase.table('botmonitor_sites').select('id, original_url, url').eq('id', site_id).eq('chat_id', message.chat.id).execute()
    if not site_data.data:
        await message.answer(f"–°–∞–π—Ç —Å ID {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    site = site_data.data[0]
    display_url = site['original_url'] if site['original_url'] else site['url']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∞–π—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(site_id=site_id)
    await state.set_state(SetExpiration.waiting_for_domain_date)
    
    await message.answer(
        f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ –¥–ª—è —Å–∞–π—Ç–∞: {display_url}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-31)\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sethosting
@dp.message(Command("sethosting"))
async def cmd_sethosting(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –≥—Ä—É–ø–ø
    if message.chat.type in ['group', 'supergroup']:
        if not await is_admin_in_chat(message.chat.id, message.from_user.id):
            await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ.")
            return

    command_parts = message.text.split(maxsplit=1)
    if len(command_parts) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID —Å–∞–π—Ç–∞: /sethosting ID")
        return
    
    try:
        site_id = int(command_parts[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–∞–π—Ç
    site_data = supabase.table('botmonitor_sites').select('id, original_url, url').eq('id', site_id).eq('chat_id', message.chat.id).execute()
    if not site_data.data:
        await message.answer(f"–°–∞–π—Ç —Å ID {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return
    
    site = site_data.data[0]
    display_url = site['original_url'] if site['original_url'] else site['url']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∞–π—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(site_id=site_id)
    await state.set_state(SetExpiration.waiting_for_hosting_date)
    
    await message.answer(
        f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è —Å–∞–π—Ç–∞: {display_url}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-31)\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
@dp.message(SetExpiration.waiting_for_domain_date)
async def process_domain_date_input(message: Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–π—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        site_id = data['site_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase.table('botmonitor_sites').update({
            'domain_expires_at': date_obj.isoformat()
        }).eq('id', site_id).execute()
        
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date_obj.strftime('%d.%m.%Y')}")
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-31)")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
@dp.message(SetExpiration.waiting_for_hosting_date)
async def process_hosting_date_input(message: Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_obj = datetime.strptime(message.text, '%Y-%m-%d').date()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–π—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        site_id = data['site_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase.table('botmonitor_sites').update({
            'hosting_expires_at': date_obj.isoformat()
        }).eq('id', site_id).execute()
        
        await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date_obj.strftime('%d.%m.%Y')}")
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-12-31)")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
@dp.message(F.chat.type.in_(['group', 'supergroup']), F.text)
async def handle_group_mention(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    if f"@{bot_username}" not in message.text:
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned_text = message.text.replace(f"@{bot_username}", "").strip()
    # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω–æ–º
    domain = cleaned_text.split()[0] if cleaned_text and '.' in cleaned_text.split()[0] else None

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
    # –ï—Å–ª–∏ –¥–æ–º–µ–Ω —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–∞–π—Ç—É
    if domain:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞: {domain}")
        # –ò—â–µ–º —ç—Ç–æ—Ç —Å–∞–π—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        sites_data = supabase.table('botmonitor_sites').select('id, url, original_url, is_up, has_ssl, ssl_expires_at, last_check').eq('chat_id', message.chat.id).execute()
        
        found_site = None
        for site in sites_data.data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º URL
            if domain in site.get('original_url', '') or domain in site.get('url', ''):
                found_site = site
                break
                
        if not found_site:
            await safe_reply_message(message, f"–°–∞–π—Ç {domain} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∞–π—Ç–µ
        site_id = found_site['id']
        site_url = found_site['url']
        original_url = found_site['original_url']
        is_up = found_site['is_up']
        has_ssl = found_site['has_ssl']
        ssl_expires_at = found_site['ssl_expires_at']
        last_check = found_site['last_check']
        
        display_url = original_url if original_url else site_url
        status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if is_up else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        last_check_str = "–ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è" if not last_check else datetime.fromisoformat(last_check.replace('Z', '+00:00')).strftime("%d.%m.%Y %H:%M:%S")
        
        response_text = f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ:**\n\n" \
                        f"**ID:** `{site_id}`\n" \
                        f"**URL:** {display_url}\n" \
                        f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
        
        if has_ssl and ssl_expires_at:
            expiry_date = datetime.fromisoformat(ssl_expires_at.replace('Z', '+00:00'))
            days_left = (expiry_date - datetime.now(timezone.utc)).days
            if days_left <= 0:
                ssl_status = "‚ö†Ô∏è **SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!**"
            elif days_left <= SSL_WARNING_DAYS:
                ssl_status = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
            else:
                ssl_status = f"‚úÖ SSL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π"
            response_text += f"**SSL:** {ssl_status}\n"
        elif site_url.startswith('https://'):
            response_text += "**SSL:** ‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
        
        response_text += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {last_check_str}"
        
        await safe_reply_message(message, response_text, parse_mode="Markdown")

    # –ï—Å–ª–∏ –¥–æ–º–µ–Ω –ù–ï —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –≤ —á–∞—Ç–µ
    else:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ {message.chat.id}")
        sites_data = supabase.table('botmonitor_sites').select('id, url, original_url').eq('chat_id', message.chat.id).execute()
        sites = [(s['id'], s['url'], s['original_url']) for s in sites_data.data]
        
        if not sites:
            await safe_reply_message(message, "üìù –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π /add")
            return
            
        # 1. –°–†–ê–ó–£ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –û–¢–í–ï–¢
        msg = await message.reply("üîÑ –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
        
        # 2. –í–´–ü–û–õ–ù–Ø–ï–ú –ü–†–û–í–ï–†–ö–ò (–ú–û–ñ–ï–¢ –ó–ê–ù–Ø–¢–¨ –í–†–ï–ú–Ø)
        results = []
        for site_id, url, original_url in sites:
            display_url = original_url if original_url else url
            status, status_code = await check_site(url)
            status_str = f"‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})" if status else f"‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})"
            site_info = f"**URL:** {display_url}\n**–°—Ç–∞—Ç—É—Å:** {status_str}"

            ssl_expires_at = None
            has_ssl = False
            if status and url.startswith('https://'):
                ssl_info = await check_ssl_certificate(url)
                has_ssl = ssl_info.get('has_ssl', False)
                if has_ssl:
                    expiry_date = ssl_info.get('expiry_date')
                    days_left = ssl_info.get('days_left')
                    if ssl_info.get('expired'):
                        site_info += f"\n**SSL:** ‚ö†Ô∏è **–ò–°–¢–Å–ö!**"
                    elif ssl_info.get('expires_soon'):
                        site_info += f"\n**SSL:** ‚ö†Ô∏è –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
                    else:
                        site_info += f"\n**SSL:** ‚úÖ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π"
                    ssl_expires_at = expiry_date
                else:
                    site_info += "\n**SSL:** ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
            results.append(site_info)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            supabase.table('botmonitor_sites').update({
                'is_up': status,
                'has_ssl': has_ssl,
                'ssl_expires_at': ssl_expires_at.isoformat() if ssl_expires_at else None,
                'last_check': datetime.now(timezone.utc).isoformat()
            }).eq('id', site_id).execute()
            
        # 3. –ó–ê–ú–ï–ù–Ø–ï–ú –ò–°–•–û–î–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò–¢–û–ì–û–í–´–ú –†–ï–ó–£–õ–¨–¢–ê–¢–û–ú
        response = "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:**\n\n" + "\n\n".join(results)
        await bot.edit_message_text(response, chat_id=message.chat.id, message_id=msg.message_id, parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
async def check_site(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                return response.status < 400, response.status
    except Exception:
        return False, 0


# --- –ù–û–í–´–ô –ë–õ–û–ö: –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ ---

SITES_FOR_IMPORT = [
    # –î–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î'. None –æ–∑–Ω–∞—á–∞–µ—Ç NULL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    # –î–æ–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ 30.03.2026
    {'url': 'https://–ø—Ä–æ–≥—Ä—ç—Å—Å.—Ä—Ñ', 'original_url': '–ø—Ä–æ–≥—Ä—ç—Å—Å.—Ä—Ñ', 'domain_expires_at': '2026-03-30', 'hosting_expires_at': None},
    {'url': 'https://–ø—Ä–æ–≥—Ä—ç—Å.—Ä—Ñ', 'original_url': '–ø—Ä–æ–≥—Ä—ç—Å.—Ä—Ñ', 'domain_expires_at': '2026-03-30', 'hosting_expires_at': None},
    {'url': 'https://–ø—Ä–æ-–≥—Ä–µ—Å—Å.—Ä—Ñ', 'original_url': '–ø—Ä–æ-–≥—Ä–µ—Å—Å.—Ä—Ñ', 'domain_expires_at': '2026-03-30', 'hosting_expires_at': None},
    {'url': 'https://–∂–∫–ø—Ä–æ–≥—Ä–µ—Å—Å.—Ä—Ñ', 'original_url': '–∂–∫–ø—Ä–æ–≥—Ä–µ—Å—Å.—Ä—Ñ', 'domain_expires_at': '2026-03-30', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ 13.05.2026
    {'url': 'https://–∂–∫–∞–ª—å–∫–æ—Ä.—Ä—Ñ', 'original_url': '–∂–∫–∞–ª—å–∫–æ—Ä.—Ä—Ñ', 'domain_expires_at': '2026-05-13', 'hosting_expires_at': None},
    {'url': 'https://–∂–∫-–∞–ª—å–∫–æ—Ä.—Ä—Ñ', 'original_url': '–∂–∫-–∞–ª—å–∫–æ—Ä.—Ä—Ñ', 'domain_expires_at': '2026-05-13', 'hosting_expires_at': None},
    {'url': 'https://–∞–ª—å–∫–æ—Ä82.—Ä—Ñ', 'original_url': '–∞–ª—å–∫–æ—Ä82.—Ä—Ñ', 'domain_expires_at': '2026-05-13', 'hosting_expires_at': None},
    {'url': 'https://jkalkor.ru', 'original_url': 'jkalkor.ru', 'domain_expires_at': '2026-05-13', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ 27.04.2026
    {'url': 'https://progres82.ru', 'original_url': 'progres82.ru', 'domain_expires_at': '2026-04-27', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞ 03.05.2026
    {'url': 'https://–º–∏–Ω–¥–∞–ª—å.—Ä—É—Å', 'original_url': '–º–∏–Ω–¥–∞–ª—å.—Ä—É—Å', 'domain_expires_at': '2026-05-03', 'hosting_expires_at': None},
    {'url': 'https://–∫–≤–∞—Ä—Ç–∞–ª–º–∏–Ω–¥–∞–ª—å.—Ä—Ñ', 'original_url': '–∫–≤–∞—Ä—Ç–∞–ª–º–∏–Ω–¥–∞–ª—å.—Ä—Ñ', 'domain_expires_at': '2026-05-03', 'hosting_expires_at': None},
    {'url': 'https://–∫–≤–∞—Ä—Ç–∞–ª-–º–∏–Ω–¥–∞–ª—å.—Ä—Ñ', 'original_url': '–∫–≤–∞—Ä—Ç–∞–ª-–º–∏–Ω–¥–∞–ª—å.—Ä—Ñ', 'domain_expires_at': '2026-05-03', 'hosting_expires_at': None},
    {'url': 'https://–∂–∫-–º–∏–Ω–¥–∞–ª—å.—Ä—Ñ', 'original_url': '–∂–∫-–º–∏–Ω–¥–∞–ª—å.—Ä—Ñ', 'domain_expires_at': '2026-05-03', 'hosting_expires_at': None},
    {'url': 'https://kvartal-mindal.ru', 'original_url': 'kvartal-mindal.ru', 'domain_expires_at': '2026-05-03', 'hosting_expires_at': None},
    
    # –î–æ–º–µ–Ω—ã –¢–û–õ–¨–ö–û —Å —Ö–æ—Å—Ç–∏–Ω–≥–æ–º - 02.07.2026
    {'url': 'https://vladograd.com', 'original_url': 'vladograd.com', 'domain_expires_at': None, 'hosting_expires_at': '2026-07-02'},

    # –î–æ–º–µ–Ω —Å –¥–æ–º–µ–Ω–æ–º –∏ —Ö–æ—Å—Ç–∏–Ω–≥–æ–º - –∂–∏–≥—É–ª–∏–Ω–∞—Ä–æ—â–∞.—Ä—Ñ
    {'url': 'https://–∂–∏–≥—É–ª–∏–Ω–∞—Ä–æ—â–∞.—Ä—Ñ', 'original_url': '–∂–∏–≥—É–ª–∏–Ω–∞—Ä–æ—â–∞.—Ä—Ñ', 'domain_expires_at': '2026-06-03', 'hosting_expires_at': '2026-04-22'},

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å –¥–∞—Ç–∞–º–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    {'url': 'https://ccg-crimea.ru', 'original_url': 'ccg-crimea.ru', 'domain_expires_at': '2025-12-07', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è 28.05.2026
    {'url': 'https://siesta-crimea.ru', 'original_url': 'siesta-crimea.ru', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://–±–∞—Ä—Ö–∞—Ç-–µ–≤–ø–∞—Ç–æ—Ä–∏—è.—Ä—Ñ', 'original_url': '–±–∞—Ä—Ö–∞—Ç-–µ–≤–ø–∞—Ç–æ—Ä–∏—è.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://–≤–µ–≥–∞-–∫—Ä—ã–º.—Ä—Ñ', 'original_url': '–≤–µ–≥–∞-–∫—Ä—ã–º.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://–≤–µ–≥–∞-–µ–≤–ø–∞—Ç–æ—Ä–∏—è.—Ä—Ñ', 'original_url': '–≤–µ–≥–∞-–µ–≤–ø–∞—Ç–æ—Ä–∏—è.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://–±–∞—Ä—Ö–∞—Ç-–∫—Ä—ã–º.—Ä—Ñ', 'original_url': '–±–∞—Ä—Ö–∞—Ç-–∫—Ä—ã–º.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://barhat-crimea.ru', 'original_url': 'barhat-crimea.ru', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://vega-crimea.ru', 'original_url': 'vega-crimea.ru', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://vega-evpatoria.ru', 'original_url': 'vega-evpatoria.ru', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://—Å–∏–µ—Å—Ç–∞-–∫—Ä—ã–º.—Ä—Ñ', 'original_url': '—Å–∏–µ—Å—Ç–∞-–∫—Ä—ã–º.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://—Å–∏–µ—Å—Ç–∞-–Ω–æ–≤—ã–π—Å–≤–µ—Ç.—Ä—Ñ', 'original_url': '—Å–∏–µ—Å—Ç–∞-–Ω–æ–≤—ã–π—Å–≤–µ—Ç.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://–±–∞—Ä—Ö–∞—Ç-–Ω–æ–≤—ã–π—Å–≤–µ—Ç.—Ä—Ñ', 'original_url': '–±–∞—Ä—Ö–∞—Ç-–Ω–æ–≤—ã–π—Å–≤–µ—Ç.—Ä—Ñ', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},
    {'url': 'https://barhat-evpatoria.ru', 'original_url': 'barhat-evpatoria.ru', 'domain_expires_at': '2026-05-28', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω—ã —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è 06.12.2025
    {'url': 'https://–∫–≤–∞—Ä—Ç–∞–ª–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'original_url': '–∫–≤–∞—Ä—Ç–∞–ª–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://–∂–∫–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—É—Å', 'original_url': '–∂–∫–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—É—Å', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://predgorie-crimea.ru', 'original_url': 'predgorie-crimea.ru', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://–∫–≤–∞—Ä—Ç–∞–ª-–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'original_url': '–∫–≤–∞—Ä—Ç–∞–ª-–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://–∂–∫-–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'original_url': '–∂–∫-–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—É—Å', 'original_url': '–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—É—Å', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://predgorie82.ru', 'original_url': 'predgorie82.ru', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},
    {'url': 'https://–∂–∫–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'original_url': '–∂–∫–ø—Ä–µ–¥–≥–æ—Ä—å–µ.—Ä—Ñ', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': '2026-07-02'},
    {'url': 'https://predgorie.com', 'original_url': 'predgorie.com', 'domain_expires_at': '2025-12-06', 'hosting_expires_at': None},

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å –¥–∞—Ç–∞–º–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    {'url': 'https://moinaco-resort.ru', 'original_url': 'moinaco-resort.ru', 'domain_expires_at': '2026-03-20', 'hosting_expires_at': None},
    {'url': 'https://moinaco-riviera.ru', 'original_url': 'moinaco-riviera.ru', 'domain_expires_at': '2026-04-28', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω —Å –¥–æ–º–µ–Ω–æ–º –∏ —Ö–æ—Å—Ç–∏–Ω–≥–æ–º - moinaco.ru
    {'url': 'https://moinaco.ru', 'original_url': 'moinaco.ru', 'domain_expires_at': '2026-01-13', 'hosting_expires_at': '2027-06-21'},

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å –¥–∞—Ç–∞–º–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    {'url': 'https://modernatlas.ru', 'original_url': 'modernatlas.ru', 'domain_expires_at': '2025-09-20', 'hosting_expires_at': None},
    {'url': 'https://atlas-sudak.ru', 'original_url': 'atlas-sudak.ru', 'domain_expires_at': '2026-07-08', 'hosting_expires_at': None},
    {'url': 'https://atlassudak.com', 'original_url': 'atlassudak.com', 'domain_expires_at': '2026-06-13', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω —Å –¥–æ–º–µ–Ω–æ–º –∏ —Ö–æ—Å—Ç–∏–Ω–≥–æ–º - atlas-apart.ru
    {'url': 'https://atlas-apart.ru', 'original_url': 'atlas-apart.ru', 'domain_expires_at': '2025-09-11', 'hosting_expires_at': '2026-06-20'},

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã —Å –¥–∞—Ç–∞–º–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    {'url': 'https://startprospect82.ru', 'original_url': 'startprospect82.ru', 'domain_expires_at': '2026-05-12', 'hosting_expires_at': None},
    {'url': 'https://startprospect82.online', 'original_url': 'startprospect82.online', 'domain_expires_at': '2026-05-12', 'hosting_expires_at': None},
    {'url': 'https://prospect-82.online', 'original_url': 'prospect-82.online', 'domain_expires_at': '2025-09-20', 'hosting_expires_at': None},
    {'url': 'https://prospect-82.ru', 'original_url': 'prospect-82.ru', 'domain_expires_at': '2025-09-20', 'hosting_expires_at': None},
    {'url': 'https://–ø—Ä–æ—Å–ø–µ–∫—Ç-82.—Ä—Ñ', 'original_url': '–ø—Ä–æ—Å–ø–µ–∫—Ç-82.—Ä—Ñ', 'domain_expires_at': '2026-08-22', 'hosting_expires_at': None},

    # –î–æ–º–µ–Ω —Å –¥–æ–º–µ–Ω–æ–º –∏ —Ö–æ—Å—Ç–∏–Ω–≥–æ–º - prospect82.ru
    {'url': 'https://prospect82.ru', 'original_url': 'prospect82.ru', 'domain_expires_at': '2026-08-22', 'hosting_expires_at': '2025-09-14'},
]

# --- –ù–û–í–´–ô –ë–õ–û–ö: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π ---

def get_renewal_keyboard(site_id: int, renewal_type: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ü—Ä–æ–¥–ª—ë–Ω' –∏ '–ï—â—ë –Ω–µ –ø—Ä–æ–¥–ª—ë–Ω'."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–ª—ë–Ω –Ω–∞ –≥–æ–¥", callback_data=f"renew:{renewal_type}:{site_id}"),
            InlineKeyboardButton(text="OK", callback_data=f"snooze:{renewal_type}:{site_id}")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@dp.callback_query(F.data.startswith("renew:"))
async def handle_renew_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–ª—ë–Ω'."""
    try:
        _, renewal_type, site_id_str = callback.data.split(":")
        site_id = int(site_id_str)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
        date_field = "domain_expires_at" if renewal_type == "domain" else "hosting_expires_at"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ –ë–î
        site_data = supabase.table('botmonitor_sites').select(date_field).eq('id', site_id).single().execute()
        if not site_data.data or not site_data.data.get(date_field):
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", show_alert=True)
            return
        
        current_date = datetime.fromisoformat(site_data.data[date_field]).date()
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ 1 –≥–æ–¥
        new_date = current_date + relativedelta(years=1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        supabase.table('botmonitor_sites').update({date_field: new_date.isoformat()}).eq('id', site_id).execute()

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.answer(f"–û—Ç–ª–∏—á–Ω–æ! –°—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_date.strftime('%d.%m.%Y')}", show_alert=True)
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ **–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.** –°—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {new_date.strftime('%d.%m.%Y')}."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_renew_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.", show_alert=True)


@dp.callback_query(F.data.startswith("snooze:"))
async def handle_snooze_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ï—â—ë –Ω–µ –ø—Ä–æ–¥–ª—ë–Ω' (–ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏)."""
    await callback.answer("OK, –ø—Ä–∏–Ω—è—Ç–æ.")
    await callback.message.edit_text(
        f"{callback.message.text}\n\n*OK, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.*"
    )


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ (–ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–ú–ï–ù–ï–ù–ê)
async def scheduled_check():
    while True:
        try:
            sites_data = supabase.table('botmonitor_sites').select(
                'id, url, original_url, chat_id, is_up, has_ssl, ssl_expires_at, domain_expires_at, hosting_expires_at, is_reserve_domain, ssl_last_notification_day'
            ).execute()
            sites = sites_data.data

            for site in sites:
                chat_id = site['chat_id']
                display_url = site['original_url'] or site['url']

                # --- –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ SSL (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ---
                site_id, url, original_url = site['id'], site['url'], site['original_url']
                was_up, had_ssl, old_ssl_expires_at = site['is_up'], site['has_ssl'], site['ssl_expires_at']
                now = datetime.now(timezone.utc)

                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                status, status_code = await check_site(url)
                status_changed = status != bool(was_up)

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL
                has_ssl, ssl_info, ssl_expires_at, ssl_changed, ssl_warning = False, None, old_ssl_expires_at, False, False
                if status and url.startswith('https://'):
                    ssl_info = await check_ssl_certificate(url)
                    has_ssl = ssl_info.get('has_ssl', False)
                    ssl_changed = has_ssl != bool(had_ssl)
                    if has_ssl:
                        ssl_expires_at = ssl_info.get('expiry_date')
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–∏: 30, 14, 7, 6, 5, 4, 3, 2, 1 –∏ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                        days_left = ssl_info.get('days_left', 0)
                        ssl_notification_days = {30, 14, 7, 6, 5, 4, 3, 2, 1}
                        if days_left in ssl_notification_days or days_left <= 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                            if not old_ssl_expires_at or (ssl_expires_at and str(ssl_expires_at) != old_ssl_expires_at):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
                                last_notification_day = site.get('ssl_last_notification_day')
                                today = now.date()
                                if last_notification_day != today or last_notification_day is None:
                                    ssl_warning = True

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                update_data = {
                    'is_up': status,
                    'has_ssl': has_ssl,
                    'ssl_expires_at': ssl_expires_at.isoformat() if ssl_expires_at and hasattr(ssl_expires_at, 'isoformat') else ssl_expires_at,
                    'last_check': now.isoformat()
                }
                
                # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SSL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if ssl_warning and has_ssl:
                    update_data['ssl_last_notification_day'] = now.date().isoformat()
                
                supabase.table('botmonitor_sites').update(update_data).eq('id', site_id).execute()

                # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ SSL (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤)
                if status_changed and not site.get('is_reserve_domain', False):
                    message = f"‚úÖ –°–∞–π—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!\nURL: {display_url}\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status_code}" if status else f"‚ùå –°–∞–π—Ç —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\nURL: {display_url}\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status_code}"
                    await send_notification(chat_id, message)
                
                if ssl_warning and has_ssl:
                    days_left = ssl_info.get('days_left')
                    if ssl_info.get('expired'):
                        message = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {display_url} –ò–°–¢–Å–ö!\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."
                    else:
                        message = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {display_url} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
                    # SSL —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
                    await send_admin_notification(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ ID: {chat_id}\n\n{message}")

                # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç –¥–æ–º–µ–Ω–∞ –∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
                now_date = now.date()
                
                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notification_schedule = {30, 14} # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                daily_start_day = 7 # –ù–∞—á–∏–Ω–∞—è —Å 7 –¥–Ω–µ–π, —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
                if site.get('domain_expires_at'):
                    domain_expiry_date = datetime.fromisoformat(site['domain_expires_at']).date()
                    days_left = (domain_expiry_date - now_date).days
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –¥–µ–Ω—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    should_notify = (days_left in notification_schedule) or (0 <= days_left <= daily_start_day)

                    if should_notify:
                        message = f"‚ÄºÔ∏è **–î–æ–º–µ–Ω:** –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è `{display_url}` –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{days_left} –¥–Ω–µ–π** ({domain_expiry_date.strftime('%d.%m.%Y')})!"
                        keyboard = get_renewal_keyboard(site['id'], "domain")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        target_chat_id = ADMIN_CHAT_ID if ONLY_ADMIN_PUSH else chat_id
                        await bot.send_message(target_chat_id, message, reply_markup=keyboard, parse_mode="Markdown")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞
                if site.get('hosting_expires_at'):
                    hosting_expiry_date = datetime.fromisoformat(site['hosting_expires_at']).date()
                    days_left = (hosting_expiry_date - now_date).days
                    
                    should_notify = (days_left in notification_schedule) or (0 <= days_left <= daily_start_day)

                    if should_notify:
                        message = f"üñ•Ô∏è **–•–æ—Å—Ç–∏–Ω–≥:** –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è `{display_url}` –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{days_left} –¥–Ω–µ–π** ({hosting_expiry_date.strftime('%d.%m.%Y')})!"
                        keyboard = get_renewal_keyboard(site['id'], "hosting")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        target_chat_id = ADMIN_CHAT_ID if ONLY_ADMIN_PUSH else chat_id
                        await bot.send_message(target_chat_id, message, reply_markup=keyboard, parse_mode="Markdown")

        except Exception as e:
            logging.error(f"Error in scheduled check: {e}")
            await send_admin_notification(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ scheduled_check: {e}")
        
        await asyncio.sleep(CHECK_INTERVAL)


# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
async def on_startup():
    asyncio.create_task(scheduled_check())


async def main():
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–π—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sites_count = get_sites_count()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logging.info("Running ScreenshotMachine API diagnosis on startup...")
    api_ok = await diagnose_api()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
    startup_message = "üöÄ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!\n" \
                     f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')}\n" \
                     f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç\n" \
                     f"üìä –°–∞–π—Ç–æ–≤ –≤ –±–∞–∑–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: {sites_count}\n" \
                     f"üì∏ ScreenshotMachine API: {'‚úÖ OK' if api_ok else '‚ùå –û—à–∏–±–∫–∞'}"
    await send_admin_notification(startup_message)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())