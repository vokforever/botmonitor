import asyncio
import aiohttp
import logging
import sqlite3
import idna  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Punycode
import ssl
import socket
import OpenSSL
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from aiogram.types import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API_TOKEN)
API_TOKEN = '7253515169:AAHK3c9wIC2vlSVn7yPi5EDkZopW9g_iVKs'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
SSL_WARNING_DAYS = 30  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–≤ –¥–Ω—è—Ö)


def update_db():
    conn = sqlite3.connect('sites_monitor.db')
    cursor = conn.cursor()
    try:
        cursor.execute('ALTER TABLE sites ADD COLUMN original_url TEXT')
        conn.commit()
    except sqlite3.OperationalError:
        # Column might already exist
        pass
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π IDN (Internationalized Domain Names)
def process_url(url):
    url = url.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not (url.startswith('http://') or url.startswith('https://')):
        url = 'https://' + url

    # –†–∞–∑–±–∏—Ä–∞–µ–º URL –Ω–∞ —á–∞—Å—Ç–∏
    protocol_end = url.find('://')
    if protocol_end != -1:
        protocol = url[:protocol_end + 3]
        remaining = url[protocol_end + 3:]

        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à –ø–æ—Å–ª–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        path_start = remaining.find('/')
        if path_start != -1:
            domain = remaining[:path_start]
            path = remaining[path_start:]
        else:
            domain = remaining
            path = ''

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –¥–æ–º–µ–Ω –≤ punycode
        try:
            punycode_domain = idna.encode(domain).decode('ascii')
            return protocol + punycode_domain + path
        except Exception as e:
            logging.error(f"Error converting domain to punycode: {e}")
            return url

    return url


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async def check_ssl_certificate(url):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
        protocol_end = url.find('://')
        if protocol_end != -1:
            remaining = url[protocol_end + 3:]
            path_start = remaining.find('/')
            if path_start != -1:
                domain = remaining[:path_start]
            else:
                domain = remaining

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL
            context = ssl.create_default_context()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            with socket.create_connection((domain, 443)) as sock:
                with context.wrap_socket(sock, server_hostname=domain) as ssock:
                    cert = ssock.getpeercert(binary_form=True)
                    x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, cert)

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    expiry_date = datetime.strptime(x509.get_notAfter().decode('ascii'), '%Y%m%d%H%M%SZ')
                    issuer = dict(x509.get_issuer().get_components())
                    issuer_name = issuer.get(b'CN', b'Unknown').decode('utf-8')
                    subject = dict(x509.get_subject().get_components())
                    subject_name = subject.get(b'CN', b'Unknown').decode('utf-8')

                    days_left = (expiry_date - datetime.now()).days

                    return {
                        'has_ssl': True,
                        'expiry_date': expiry_date,
                        'days_left': days_left,
                        'issuer': issuer_name,
                        'subject': subject_name,
                        'expires_soon': days_left <= SSL_WARNING_DAYS,
                        'expired': days_left <= 0
                    }
    except Exception as e:
        logging.error(f"Error checking SSL certificate: {e}")
        return {
            'has_ssl': False,
            'error': str(e)
        }


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('sites_monitor.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sites (
        id INTEGER PRIMARY KEY,
        url TEXT NOT NULL,
        original_url TEXT,
        user_id INTEGER NOT NULL,
        is_up BOOLEAN DEFAULT 1,
        has_ssl BOOLEAN DEFAULT 0,
        ssl_expires_at TIMESTAMP,
        last_check TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞
class AddSite(StatesGroup):
    waiting_for_url = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤\n"
        "/remove - —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–º–∏ —Å–∞–π—Ç–æ–≤\n"
        "/remove - —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/status - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∞–π—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∏—Ä—É–µ–º.—Ä—Ñ).\n"
        "–ü—Ä–æ—Ç–æ–∫–æ–ª (http:// –∏–ª–∏ https://) –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.\n"
        "–î–ª—è HTTPS —Å–∞–π—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
@dp.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddSite.waiting_for_url)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.\n–ù–∞–ø—Ä–∏–º–µ—Ä: example.com –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∏—Ä—É–µ–º.—Ä—Ñ")


# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@dp.message(AddSite.waiting_for_url)
async def process_url_input(message: Message, state: FSMContext):
    original_url = message.text.strip()
    url = process_url(original_url)

    conn = sqlite3.connect('sites_monitor.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π URL –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT id FROM sites WHERE url = ? AND user_id = ?", (url, message.from_user.id))
    existing = cursor.fetchone()

    if existing:
        await message.answer(f"‚ö†Ô∏è –°–∞–π—Ç {original_url} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.")
        conn.close()
        await state.clear()
        return

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    status_msg = await message.answer(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ {original_url}...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    status, status_code = await check_site(url)
    is_up = 1 if status else 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –µ—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
    ssl_info = None
    has_ssl = 0
    ssl_expires_at = None
    ssl_message = ""

    if status and url.startswith('https://'):
        await bot.edit_message_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {original_url}...",
                                    chat_id=message.chat.id,
                                    message_id=status_msg.message_id)
        ssl_info = await check_ssl_certificate(url)
        has_ssl = 1 if ssl_info.get('has_ssl', False) else 0

        if has_ssl:
            ssl_expires_at = ssl_info.get('expiry_date')
            days_left = ssl_info.get('days_left')

            if ssl_info.get('expired'):
                ssl_message = f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!"
            elif ssl_info.get('expires_soon'):
                ssl_message = f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
            else:
                ssl_message = f"\nSSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π."

            ssl_message += f"\n–í—ã–¥–∞–Ω: {ssl_info.get('subject')}"
            ssl_message += f"\n–¶–µ–Ω—Ç—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ssl_info.get('issuer')}"
        else:
            ssl_message = "\n‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "INSERT INTO sites (url, original_url, user_id, is_up, has_ssl, ssl_expires_at, last_check) VALUES (?, ?, ?, ?, ?, ?, ?)",
        (url, original_url, message.from_user.id, is_up, has_ssl, ssl_expires_at, datetime.now())
    )
    conn.commit()
    conn.close()

    # –ï—Å–ª–∏ URL –±—ã–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    punycode_info = ""
    if url != original_url and "xn--" in url:
        punycode_info = f"\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤: {url}"

    if status:
        await bot.edit_message_text(
            f"‚úÖ –°–∞–π—Ç {original_url} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status_code}).{punycode_info}{ssl_message}",
            chat_id=message.chat.id,
            message_id=status_msg.message_id
        )
    else:
        await bot.edit_message_text(
            f"‚ö†Ô∏è –°–∞–π—Ç {original_url} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –Ω–æ —Å–µ–π—á–∞—Å –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status_code}).{punycode_info}",
            chat_id=message.chat.id,
            message_id=status_msg.message_id
        )

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
@dp.message(Command("list"))
async def cmd_list(message: Message):
    conn = sqlite3.connect('sites_monitor.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, url, original_url, is_up, has_ssl, ssl_expires_at, last_check 
        FROM sites WHERE user_id = ?
    """, (message.from_user.id,))
    sites = cursor.fetchall()
    conn.close()

    if not sites:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π /add")
        return

    response = "üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤:\n\n"
    for site_id, url, original_url, is_up, has_ssl, ssl_expires_at, last_check in sites:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        display_url = original_url if original_url else url
        status = "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" if is_up else "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        last_check_str = "–ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è" if not last_check else datetime.fromisoformat(last_check).strftime(
            "%d.%m.%Y %H:%M:%S")

        site_info = f"ID: {site_id}\nURL: {display_url}\n–°—Ç–∞—Ç—É—Å: {status}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        if has_ssl and ssl_expires_at:
            expiry_date = datetime.fromisoformat(ssl_expires_at)
            days_left = (expiry_date - datetime.now()).days
            if days_left <= 0:
                ssl_status = "‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!"
            elif days_left <= SSL_WARNING_DAYS:
                ssl_status = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
            else:
                ssl_status = f"SSL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π"
            site_info += f"{ssl_status}\n"
        elif url.startswith('https://'):
            site_info += "‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n"

        site_info += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_str}\n\n"
        response += site_info

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove
@dp.message(Command("remove"))
async def cmd_remove(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)
    args = command_parts[1] if len(command_parts) > 1 else None

    if not args:
        conn = sqlite3.connect('sites_monitor.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id, original_url, url FROM sites WHERE user_id = ?", (message.from_user.id,))
        sites = cursor.fetchall()
        conn.close()

        if not sites:
            await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        response = "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remove ID\n\n–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–∞–π—Ç–æ–≤:\n"
        for site_id, original_url, url in sites:
            display_url = original_url if original_url else url
            response += f"ID: {site_id} - {display_url}\n"

        await message.answer(response)
        return

    try:
        site_id = int(args)
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    conn = sqlite3.connect('sites_monitor.db')
    cursor = conn.cursor()
    cursor.execute("SELECT original_url, url FROM sites WHERE id = ? AND user_id = ?", (site_id, message.from_user.id))
    site = cursor.fetchone()

    if not site:
        await message.answer(f"‚ùå –°–∞–π—Ç —Å ID {site_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
    else:
        original_url, url = site
        display_url = original_url if original_url else url
        cursor.execute("DELETE FROM sites WHERE id = ? AND user_id = ?", (site_id, message.from_user.id))
        conn.commit()
        await message.answer(f"‚úÖ –°–∞–π—Ç {display_url} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@dp.message(Command("status"))
async def cmd_status(message: Message):
    conn = sqlite3.connect('sites_monitor.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, url, original_url FROM sites WHERE user_id = ?", (message.from_user.id,))
    sites = cursor.fetchall()
    conn.close()

    if not sites:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –∫–æ–º–∞–Ω–¥–æ–π /add")
        return

    msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤...")

    results = []
    for site_id, url, original_url in sites:
        display_url = original_url if original_url else url

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
        status, status_code = await check_site(url)
        status_str = f"‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})" if status else f"‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {status_code})"
        site_info = f"ID: {site_id}\nURL: {display_url}\n–°—Ç–∞—Ç—É—Å: {status_str}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –µ—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
        ssl_info = None
        has_ssl = False
        ssl_expires_at = None

        if status and url.startswith('https://'):
            ssl_info = await check_ssl_certificate(url)
            has_ssl = ssl_info.get('has_ssl', False)

            if has_ssl:
                expiry_date = ssl_info.get('expiry_date')
                days_left = ssl_info.get('days_left')

                if ssl_info.get('expired'):
                    site_info += f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö!"
                elif ssl_info.get('expires_soon'):
                    site_info += f"\n‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
                else:
                    site_info += f"\nSSL –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {days_left} –¥–Ω–µ–π"

                ssl_expires_at = expiry_date
            else:
                site_info += "\n‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"

        results.append(site_info)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        conn = sqlite3.connect('sites_monitor.db')
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE sites SET is_up = ?, has_ssl = ?, ssl_expires_at = ?, last_check = ? WHERE id = ?",
            (1 if status else 0, 1 if has_ssl else 0, ssl_expires_at, datetime.now(), site_id)
        )
        conn.commit()
        conn.close()

    response = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n\n".join(results)
    await bot.edit_message_text(response, chat_id=message.chat.id, message_id=msg.message_id)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
async def check_site(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                return response.status < 400, response.status
    except Exception:
        return False, 0


# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
async def scheduled_check():
    while True:
        try:
            conn = sqlite3.connect('sites_monitor.db')
            cursor = conn.cursor()
            cursor.execute("SELECT id, url, original_url, user_id, is_up, has_ssl, ssl_expires_at FROM sites")
            sites = cursor.fetchall()

            for site_id, url, original_url, user_id, was_up, had_ssl, old_ssl_expires_at in sites:
                display_url = original_url if original_url else url
                now = datetime.now()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                status, status_code = await check_site(url)
                status_changed = status != bool(was_up)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL, –µ—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
                ssl_info = None
                has_ssl = False
                ssl_expires_at = old_ssl_expires_at
                ssl_changed = False
                ssl_warning = False

                if status and url.startswith('https://'):
                    ssl_info = await check_ssl_certificate(url)
                    has_ssl = ssl_info.get('has_ssl', False)
                    ssl_changed = has_ssl != bool(had_ssl)

                    if has_ssl:
                        ssl_expires_at = ssl_info.get('expiry_date')

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                        if ssl_info.get('expires_soon') or ssl_info.get('expired'):
                            # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—ã–ª–æ –∏–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                            if not old_ssl_expires_at or str(ssl_expires_at) != old_ssl_expires_at:
                                ssl_warning = True

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                cursor.execute(
                    "UPDATE sites SET is_up = ?, has_ssl = ?, ssl_expires_at = ?, last_check = ? WHERE id = ?",
                    (1 if status else 0, 1 if has_ssl else 0, ssl_expires_at, now, site_id)
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                try:
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    if status_changed:
                        if status:
                            message = f"‚úÖ –°–∞–π—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!\nURL: {display_url}\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status_code}\n–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S')}"
                        else:
                            message = f"‚ùå –°–∞–π—Ç —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\nURL: {display_url}\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {status_code}\n–í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M:%S')}"
                        await bot.send_message(chat_id=user_id, text=message)

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ SSL
                    if ssl_changed and has_ssl:
                        days_left = ssl_info.get('days_left')
                        message = f"üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {display_url}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {ssl_expires_at.strftime('%d.%m.%Y')}\n"
                        if ssl_info.get('expired'):
                            message += "‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–°–¢–Å–ö! –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."
                        elif ssl_info.get('expires_soon'):
                            message += f"‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!"
                        await bot.send_message(chat_id=user_id, text=message)

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ SSL
                    elif ssl_warning and has_ssl:
                        days_left = ssl_info.get('days_left')
                        if ssl_info.get('expired'):
                            message = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {display_url} –ò–°–¢–Å–ö!\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."
                        else:
                            message = f"‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {display_url} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç."
                        await bot.send_message(chat_id=user_id, text=message)

                except Exception as e:
                    logging.error(f"Error sending notification to user {user_id}: {e}")

            conn.commit()
            conn.close()

        except Exception as e:
            logging.error(f"Error in scheduled check: {e}")

        # –ñ–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(CHECK_INTERVAL)


# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
async def on_startup():
    asyncio.create_task(scheduled_check())


async def main():
    init_db()
    update_db()  # Add this line
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())